{"version":3,"sources":["components/Clock.js","components/Gemeente.js","App.js","serviceWorker.js","index.js"],"names":["Clock","useState","Date","date","setDate","setInterval","style","color","toLocaleTimeString","Gemeente","props","info","App","count","setCount","num","setNum","gemeentes","setGemeentes","inwCount","setInwCount","useEffect","fetch","then","response","json","data","console","log","Object","entries","type","min","step","value","onChange","e","target","map","gemeente","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sKAsBeA,MAnBf,WAAkB,IAAD,EACWC,mBAAS,IAAIC,MADxB,mBACNC,EADM,KACAC,EADA,KAYb,OATAC,aAAY,kBAAMD,EAAQ,IAAIF,QAAS,KAUnC,yBAAKI,MANL,CACIC,MAAO,YAMP,4BAAKJ,EAAKK,wBCEPC,MAhBf,SAAkBC,GASd,OACI,yBAAKJ,MAPL,CACIC,MAAO,YAOP,2BAAIG,EAAMC,KAAK,MCmDZC,MA5Df,WAAgB,IAAD,EAEYX,mBAAS,GAFrB,mBAEPY,EAFO,KAEAC,EAFA,OAGQb,mBAAS,GAHjB,mBAGPc,EAHO,KAGFC,EAHE,OAKoBf,mBAAS,IAL7B,mBAKPgB,EALO,KAKIC,EALJ,OAMkBjB,mBAAS,KAN3B,mBAMPkB,EANO,KAMGC,EANH,KAuCd,OA/BAC,qBAAU,WAETC,MAAM,+BAAD,OAAgCT,IACnCU,MAAK,SAACC,GACN,OAAOA,EAASC,UACdF,MAAK,SAACG,GACRC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAKb,IACjBG,EAAOU,EAAKb,SAGZ,CAACA,IAEJQ,qBAAU,WAETC,MAAM,iCAAD,OAAkCH,IACrCI,MAAK,SAACC,GACN,OAAOA,EAASC,UACdF,MAAK,SAACG,GACRR,EAAaW,OAAOC,QAAQJ,IAC5BC,QAAQC,IAAIX,QAGZ,CAACE,IASH,6BACC,kBAAC,EAAD,MACA,2BAAOY,KAAK,SAASC,IAAI,IAAIC,KAAK,OAAOC,MAAOf,EAAUgB,SAAU,SAACC,GAAD,OAAOhB,EAAYgB,EAAEC,OAAOH,UAChG,6BACEjB,EAAUqB,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CAAU5B,KAAM4B,QAGlB,6BACC,4BAAQC,QAAS,kBAAM1B,EAASD,EAAQ,KAAxC,WACUA,EADV,UAGA,uBAAGP,MAlBL,CACCC,MAAOQ,EAAM,GAAK,EAAI,UAAY,YAkB/BA,MC9Cc0B,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"js/main.e4ff5ae6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nfunction Clock() {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    setInterval(() => setDate(new Date()), 1000);\r\n\r\n\r\n    const makePurple = () => (\r\n        {\r\n            color: '#800080'\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div style={makePurple()}>\r\n            <h2>{date.toLocaleTimeString()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clock;\r\n","import React, { useState } from 'react';\r\n\r\n\r\nfunction Gemeente(props) {\r\n\r\n    const getStyle = () => (\r\n        {\r\n            color: '#ff0000'\r\n        }\r\n    );\r\n\r\n\r\n    return (\r\n        <div style={getStyle()}>\r\n            <p>{props.info[0]}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gemeente;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Clock from './components/Clock';\r\nimport Gemeente from './components/Gemeente';\r\n\r\nfunction App() {\r\n\r\n\tconst [count, setCount] = useState(0);\r\n\tconst [num, setNum] = useState(0);\r\n\r\n\tconst [gemeentes, setGemeentes] = useState([]);\r\n\tconst [inwCount, setInwCount] = useState(500000);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Haal data uit Flask API\r\n\t\tfetch(`http://127.0.0.1/api/number/${count}`)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t}).then((data) => {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(data[count]);\r\n\t\t\t\tsetNum(data[count]);\r\n\t\t\t});\r\n\r\n\t}, [count]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Haal gemeentes op uit Flask API\r\n\t\tfetch(`http://127.0.0.1/api/gemeente/${inwCount}`)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t}).then((data) => {\r\n\t\t\t\tsetGemeentes(Object.entries(data));\r\n\t\t\t\tconsole.log(gemeentes);\r\n\t\t\t});\r\n\r\n\t}, [inwCount])\r\n\r\n\tconst getStyle = () => (\r\n\t\t{\r\n\t\t\tcolor: num % 2 == 0 ? '#800080' : '#FFFFFF'\r\n\t\t}\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div >\r\n\t\t\t<Clock />\r\n\t\t\t<input type=\"number\" min=\"0\" step=\"1000\" value={inwCount} onChange={(e) => setInwCount(e.target.value)} />\r\n\t\t\t<div>\r\n\t\t\t\t{gemeentes.map((gemeente) => (\r\n\t\t\t\t\t<Gemeente info={gemeente} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={() => setCount(count + 1)}>\r\n\t\t\t\t\tClicked {count} times\r\n      \t\t\t</button>\r\n\t\t\t\t<p style={getStyle()}>\r\n\t\t\t\t\t{num}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}