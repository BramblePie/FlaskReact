{"version":3,"sources":["components/Gemeente.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Gemeente","props","class","info","Profile","useState","inwCount","setInwCount","useEffect","getGemeentes","type","min","step","value","onChange","e","target","App","gemeentes","setGemeentes","aant_inw","fetch","then","response","json","data","Object","entries","map","gemeente","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wQAYeA,MATf,SAAkBC,GAEd,OACI,yBAAKC,MAAM,YACP,2BAAID,EAAME,KAAK,M,MCcZC,MAjBf,SAAiBH,GAAQ,IAAD,EAEYI,mBAAS,KAFrB,mBAEbC,EAFa,KAEHC,EAFG,KAQpB,OAJAC,qBAAU,WACNP,EAAMQ,aAAaH,KACpB,CAACA,IAGA,yBAAKJ,MAAM,WACP,uCACA,2BAAOQ,KAAK,SAASC,IAAI,IAAIC,KAAK,OAC9BC,MAAOP,EAAUQ,SAAU,SAACC,GAAD,OAAOR,EAAYQ,EAAEC,OAAOH,YCiBxDI,MA3Bf,WAAgB,IAAD,EAEoBZ,mBAAS,IAF7B,mBAEPa,EAFO,KAEIC,EAFJ,KAed,OACC,yBAAKjB,MAAM,OACV,kBAAC,EAAD,CAASO,aAZU,SAACW,GAErBC,MAAM,iCAAD,OAAkCD,IACrCE,MAAK,SAACC,GACN,OAAOA,EAASC,UACdF,MAAK,SAACG,GACRN,EAAaO,OAAOC,QAAQF,UAO7B,6BACEP,EAAUU,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CAAU1B,KAAM0B,UCdDC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.2195552d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nfunction Gemeente(props) {\r\n\r\n    return (\r\n        <div class=\"gemeente\">\r\n            <p>{props.info[0]}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gemeente;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Profile.css'\r\n\r\n\r\nfunction Profile(props) {\r\n\r\n    const [inwCount, setInwCount] = useState(500000);\r\n\r\n    useEffect(() => {\r\n        props.getGemeentes(inwCount);\r\n    }, [inwCount])\r\n\r\n    return (\r\n        <div class=\"profile\">\r\n            <h2>Profiel</h2>\r\n            <input type=\"number\" min=\"0\" step=\"1000\"\r\n                value={inwCount} onChange={(e) => setInwCount(e.target.value)} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css'\r\n\r\nimport Gemeente from './components/Gemeente';\r\nimport Profile from './components/Profile';\r\n\r\nfunction App() {\r\n\r\n\tconst [gemeentes, setGemeentes] = useState([]);\r\n\r\n\r\n\tconst getGemeentes = (aant_inw) => {\r\n\t\t// Haal gemeentes op uit Flask API\r\n\t\tfetch(`http://127.0.0.1/api/gemeente/${aant_inw}`)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t}).then((data) => {\r\n\t\t\t\tsetGemeentes(Object.entries(data));\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div class=\"app\">\r\n\t\t\t<Profile getGemeentes={getGemeentes} />\r\n\t\t\t<div>\r\n\t\t\t\t{gemeentes.map((gemeente) => (\r\n\t\t\t\t\t<Gemeente info={gemeente} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}